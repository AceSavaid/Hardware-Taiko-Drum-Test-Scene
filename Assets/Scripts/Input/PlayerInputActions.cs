//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""0dee8d28-9b91-4870-8040-0cc7d9facb18"",
            ""actions"": [
                {
                    ""name"": ""LeftRim"",
                    ""type"": ""Button"",
                    ""id"": ""ee2c87a7-b9a5-45eb-8621-95d4417d3dda"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftCenter"",
                    ""type"": ""Button"",
                    ""id"": ""c0ddbdb5-3dfa-4c6f-a074-c5995eecf24e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightCenter"",
                    ""type"": ""Button"",
                    ""id"": ""9b751545-29fc-4ea7-830d-fd5703cc8610"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightRim"",
                    ""type"": ""Button"",
                    ""id"": ""58ba721c-42de-451c-ae84-b5aff9dc84af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0c5ea423-844b-49ad-a1f3-497e7e2719c3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb569151-355d-4c3c-9720-1225291072be"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightCenter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f911fb9-692d-4f1e-ad2c-8b1e31852a9c"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightRim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1140d69a-8e58-4141-a88c-6ca85f1a9062"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftCenter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_LeftRim = m_Game.FindAction("LeftRim", throwIfNotFound: true);
        m_Game_LeftCenter = m_Game.FindAction("LeftCenter", throwIfNotFound: true);
        m_Game_RightCenter = m_Game.FindAction("RightCenter", throwIfNotFound: true);
        m_Game_RightRim = m_Game.FindAction("RightRim", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private List<IGameActions> m_GameActionsCallbackInterfaces = new List<IGameActions>();
    private readonly InputAction m_Game_LeftRim;
    private readonly InputAction m_Game_LeftCenter;
    private readonly InputAction m_Game_RightCenter;
    private readonly InputAction m_Game_RightRim;
    public struct GameActions
    {
        private @PlayerInputActions m_Wrapper;
        public GameActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftRim => m_Wrapper.m_Game_LeftRim;
        public InputAction @LeftCenter => m_Wrapper.m_Game_LeftCenter;
        public InputAction @RightCenter => m_Wrapper.m_Game_RightCenter;
        public InputAction @RightRim => m_Wrapper.m_Game_RightRim;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void AddCallbacks(IGameActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionsCallbackInterfaces.Add(instance);
            @LeftRim.started += instance.OnLeftRim;
            @LeftRim.performed += instance.OnLeftRim;
            @LeftRim.canceled += instance.OnLeftRim;
            @LeftCenter.started += instance.OnLeftCenter;
            @LeftCenter.performed += instance.OnLeftCenter;
            @LeftCenter.canceled += instance.OnLeftCenter;
            @RightCenter.started += instance.OnRightCenter;
            @RightCenter.performed += instance.OnRightCenter;
            @RightCenter.canceled += instance.OnRightCenter;
            @RightRim.started += instance.OnRightRim;
            @RightRim.performed += instance.OnRightRim;
            @RightRim.canceled += instance.OnRightRim;
        }

        private void UnregisterCallbacks(IGameActions instance)
        {
            @LeftRim.started -= instance.OnLeftRim;
            @LeftRim.performed -= instance.OnLeftRim;
            @LeftRim.canceled -= instance.OnLeftRim;
            @LeftCenter.started -= instance.OnLeftCenter;
            @LeftCenter.performed -= instance.OnLeftCenter;
            @LeftCenter.canceled -= instance.OnLeftCenter;
            @RightCenter.started -= instance.OnRightCenter;
            @RightCenter.performed -= instance.OnRightCenter;
            @RightCenter.canceled -= instance.OnRightCenter;
            @RightRim.started -= instance.OnRightRim;
            @RightRim.performed -= instance.OnRightRim;
            @RightRim.canceled -= instance.OnRightRim;
        }

        public void RemoveCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions @Game => new GameActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IGameActions
    {
        void OnLeftRim(InputAction.CallbackContext context);
        void OnLeftCenter(InputAction.CallbackContext context);
        void OnRightCenter(InputAction.CallbackContext context);
        void OnRightRim(InputAction.CallbackContext context);
    }
}
